import fs from 'node:fs';import path from 'node:path';import { fileURLToPath } from 'node:url';const __filename=fileURLToPath(import.meta.url);const __dirname=path.dirname(__filename);const projRoot=path.resolve(__dirname,'..');const publicCatalog=path.join(projRoot,'public','catalog');const libDir=path.join(projRoot,'lib');const IMG_EXT=new Set(['.jpg','.jpeg','.png','.webp','.gif']);const readDirs=p=>fs.existsSync(p)?fs.readdirSync(p,{withFileTypes:true}):[];function walk(){const clients=new Map();const products=new Map();for(const clientEnt of readDirs(publicCatalog)){if(!clientEnt.isDirectory())continue;const clientPath=path.join(publicCatalog,clientEnt.name);for(const catEnt of readDirs(clientPath)){if(!catEnt.isDirectory())continue;const catPath=path.join(clientPath,catEnt.name);for(const fileEnt of readDirs(catPath)){if(!fileEnt.isFile())continue;const ext=path.extname(fileEnt.name).toLowerCase();if(!IMG_EXT.has(ext))continue;const base=path.basename(fileEnt.name,ext);const ref=base.replace(/_.+$/,'');const url=`/catalog/${encodeURIComponent(clientEnt.name)}/${encodeURIComponent(catEnt.name)}/${encodeURIComponent(fileEnt.name)}`;if(!products.has(ref)){products.set(ref,{id:ref,name:ref,sku:ref,unit:'pcs',specFields:[],imageUrls:[]});}products.get(ref).imageUrls.push(url);if(!clients.has(clientEnt.name))clients.set(clientEnt.name,new Set());clients.get(clientEnt.name).add(ref);}}}return {products,clients};}function writeProductsTs(productsMap){const items=[...productsMap.values()].map(p=>`  '${p.id}': { id: '${p.id}', name: '${p.name}', sku: '${p.sku}', unit: 'pcs', specFields: [], imageUrls: [${p.imageUrls.map(u=>`'${u}'`).join(', ')}] }`).join(',\n');const out=`import type { Product } from './types';
export const PRODUCTS: Record<string, Product> = {\n${items}\n};\n`;fs.writeFileSync(path.join(libDir,'products.ts'),out,'utf8');}function writeDataTs(clientsMap){const items=[...clientsMap.entries()].map(([name,set])=>{const username=name.toLowerCase().replace(/\s+/g,'');const id=`client-${username}`;const productIds=[...set].map(id=>`'${id}'`).join(', ');return `  { id: '${id}', name: '${name}', username: '${username}', password: 'password123', productIds: [${productIds}], role: 'client' }`;}).join(',\n');const out=`import type { Client } from './types';
export const CLIENTS: Client[] = [
  { id:'super-1', name:'CEO', username:'superadmin', password:'super123', productIds:[], role:'superadmin' },
  { id:'admin-1', name:'Staff One', username:'admin', password:'admin123', productIds:[], role:'admin' },
${items}
];
export function findClientByUsername(username: string){ return CLIENTS.find(c=>c.username.toLowerCase()===username.toLowerCase()); }
export function findClientById(id: string){ return CLIENTS.find(c=>c.id===id); }
`;fs.writeFileSync(path.join(libDir,'data.ts'),out,'utf8');}(function main(){if(!fs.existsSync(publicCatalog)){console.error('Folder not found:',publicCatalog);process.exit(1);}const {products,clients}=walk();writeProductsTs(products);writeDataTs(clients);console.log(`Generated ${products.size} products and ${clients.size} clients.`);})();