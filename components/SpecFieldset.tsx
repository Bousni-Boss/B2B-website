'use client';import React,{useEffect} from 'react';import { CATEGORY_FIELDS } from '@/lib/category-fields';import type { SpecField } from '@/lib/types';function stepForCategoryField(f:SpecField){return f.step??0.1;}export default function SpecFieldset({category,specs,onSpecs}:{category:string;specs:Record<string,any>;onSpecs:(s:Record<string,any>)=>void}){const fields:SpecField[] = CATEGORY_FIELDS[category]||[];useEffect(()=>{if(!fields.length)return;const next={...specs};let changed=false;for(const f of fields){if(f.default!==undefined&&next[f.key]===undefined){next[f.key]=f.default;changed=true;}}if(changed)onSpecs(next);},[category]);const set=(k:string,v:any)=>onSpecs({...specs,[k]:v});if(!fields.length)return <div className='text-xs' style={{color:'var(--muted)'}}>No extra details required for this category.</div>;return(<div className='space-y-3'>{fields.map(f=>{if(f.type==='number'){return(<div key={f.key}><label className='block text-sm mb-1'>{f.label} {f.required&&<em style={{color:'var(--danger)',fontStyle:'normal'}}>*</em>}</label><input className='input' type='number' step={stepForCategoryField(f)} inputMode='numeric' pattern='\d*' value={specs[f.key]??''} onChange={e=>set(f.key,e.target.value===''?'':Number(e.target.value))}/></div>);}if(f.type==='text'){return(<div key={f.key}><label className='block text-sm mb-1'>{f.label} {f.required&&<em style={{color:'var(--danger)',fontStyle:'normal'}}>*</em>}</label><input className='input' value={specs[f.key]??''} onChange={e=>set(f.key,e.target.value)}/></div>);}if(f.type==='select'){return(<div key={f.key}><label className='block text-sm mb-1'>{f.label} {f.required&&<em style={{color:'var(--danger)',fontStyle:'normal'}}>*</em>}</label><select className='input' value={specs[f.key]??''} onChange={e=>set(f.key,e.target.value)}><option value=''>Select...</option>{(f.options??[]).map(o=><option key={o} value={o}>{o}</option>)}</select></div>);}if(f.type==='set'){return <div key={f.key} className='card'>Configure set pieces in a future step (placeholder).</div>;}return null;})}</div>)}